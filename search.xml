<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>spring AOP</title>
    <url>/2020/01/21/spring-AOP/</url>
    <content><![CDATA[<h4 id="什么是AOP"><a href="#什么是AOP" class="headerlink" title="什么是AOP"></a>什么是AOP</h4><p>AOP：（Aspect oriented Programming）面向切面编程</p>
<p>面向切面编程：基于OOP基础上新的编程思想；指在程序运行期间，将某段代码<strong>动态切入</strong>到<strong>指定方法</strong>的<strong>指定位置</strong>进行运行的这种编程方式。</p>
<h4 id="AOP术语"><a href="#AOP术语" class="headerlink" title="AOP术语"></a>AOP术语</h4><p><a href="https://cdn.jsdelivr.net/gh/xx-i/blogCDN/img/20200121165735.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://cdn.jsdelivr.net/gh/xx-i/blogCDN/img/20200121165735.png" class="lazyload"></a></p>
<h4 id="使用spring的AOP"><a href="#使用spring的AOP" class="headerlink" title="使用spring的AOP"></a>使用spring的AOP</h4><ol>
<li>添加maven依赖</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring 对 aop 的支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> 		加强版的aop功能 </span></span><br><span class="line"><span class="comment">		即使没有实现接口也能创建动态代理</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>编写spring配置类</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(value = &#123;<span class="string">"net.mzgx.impl"</span>, <span class="string">"net.mzgx.util"</span>&#125;)</span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li>编写service接口和实现类</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="function">Integer <span class="title">add</span><span class="params">(Integer i, Integer j)</span></span>;</span><br><span class="line">    <span class="function">Integer <span class="title">sub</span><span class="params">(Integer i, Integer j)</span></span>;</span><br><span class="line">    <span class="function">Integer <span class="title">mul</span><span class="params">(Integer i, Integer j)</span></span>;</span><br><span class="line">    <span class="function">Integer <span class="title">div</span><span class="params">(Integer i, Integer j)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCalculator</span> <span class="keyword">implements</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">add</span><span class="params">(Integer i, Integer j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i + j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">sub</span><span class="params">(Integer i, Integer j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i - j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">mul</span><span class="params">(Integer i, Integer j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i * j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">div</span><span class="params">(Integer i, Integer j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i / j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol start="4">
<li>编写切面类</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * try &#123;</span></span><br><span class="line"><span class="comment">     *     @Before</span></span><br><span class="line"><span class="comment">     *     method.invoke(obj, args);</span></span><br><span class="line"><span class="comment">     *     @AfterReturning</span></span><br><span class="line"><span class="comment">     * &#125; catch(e) &#123;</span></span><br><span class="line"><span class="comment">     *     @AfterThrowing</span></span><br><span class="line"><span class="comment">     * &#125; finally &#123;</span></span><br><span class="line"><span class="comment">     *     @After</span></span><br><span class="line"><span class="comment">     * &#125;</span></span><br><span class="line"><span class="comment">     * 通知注解：</span></span><br><span class="line"><span class="comment">     * @Before: 在目标方法之前运行                    前置通知</span></span><br><span class="line"><span class="comment">     * @After: 在目标方法结束之后执行                 后置通知</span></span><br><span class="line"><span class="comment">     * @AfterReturning: 在目标方法正常返回            返回通知</span></span><br><span class="line"><span class="comment">     * @AfterThrowing: 在目标方法抛出异常之后运行     异常通知</span></span><br><span class="line"><span class="comment">     * @Around: 环绕                                环绕通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在目标方法之前运行</span></span><br><span class="line">    <span class="comment">// execute("权限访问符 返回值 方法签名")</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(public Integer net.mzgx.impl.MyCalculator.add(Integer, Integer))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">logStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法开始"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在目标方法正常结束</span></span><br><span class="line">    <span class="meta">@AfterReturning</span>(<span class="string">"execution(public Integer net.mzgx.impl.MyCalculator.add(Integer, Integer))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">logReturn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法返回"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在目标方法出现异常的时候执行</span></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(<span class="string">"execution(public Integer net.mzgx.impl.MyCalculator.add(Integer, Integer))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">logException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法异常"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在目标方法结束后执行</span></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"execution(public Integer net.mzgx.impl.MyCalculator.add(Integer, Integer))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">logEnd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol start="5">
<li>测试</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从容器中拿必须用它的接口类型，不要用本类</span></span><br><span class="line">    Calculator calculator = applicationContext.getBean(Calculator<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(calculator.add(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>也可以不创建接口，没有接口就是本类的类型</p>
<h4 id="接入点表达式的写法"><a href="#接入点表达式的写法" class="headerlink" title="接入点表达式的写法"></a>接入点表达式的写法</h4><p><strong>格式：</strong><code>execution(访问权限符 返回类型 方法全类名(参数表))</code></p>
<p><strong>统配符：</strong></p>
<p><code>*</code></p>
<ol>
<li><p>匹配一个或多个字符</p>
<p><code>execution(public Integer net.mz*x.impl.My*.add(Integer, Integer))</code></p>
</li>
<li><p>匹配任意一个参数</p>
<p><code>execution(public Integer net.mzgx.impl.MyCalculator.add(*, *))</code></p>
</li>
<li><p>权限位置不能写*</p>
</li>
</ol>
<p><code>..</code></p>
<ol>
<li><p>匹配任意多个参数，任意类型参数</p>
</li>
<li><p>匹配任意多层路径</p>
<p><code>execution(public Integer net..add(..))</code></p>
</li>
</ol>
<p>织入任意方法：<code>execution(* *.*(..))</code></p>
<p>也可以写<code>&amp;&amp; || !</code></p>
<h4 id="通知方法的执行顺序"><a href="#通知方法的执行顺序" class="headerlink" title="通知方法的执行顺序"></a>通知方法的执行顺序</h4><p>正常执行：<code>@Before(前置通知) =&gt; @After(后置通知) =&gt; @AfterReturning(正常返回)</code></p>
<p>异常执行: <code>@Before(前置通知) =&gt; @After(后置通知) =&gt; @AfterThrowing(方法异常)</code></p>
<h4 id="获取方法的详细信息"><a href="#获取方法的详细信息" class="headerlink" title="获取方法的详细信息"></a>获取方法的详细信息</h4><p>在切面类中传入<code>JoinPoint</code>参数可以拿到切入点方法的信息</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">joinPoint.getSignature()   获取方法签名</span><br><span class="line">joinPoint.getArgs()        获取切入点参数列表</span><br></pre></td></tr></table></figure></div>

<p>接收方法的返回值和抛出的异常：</p>
<p>在通知方法上加上额外的参数，并在这些注解上指定对应的参数。</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AfterReturning</span>(value = <span class="string">"execution(public Integer net.mzgx.impl.MyCalculator.add(Integer, Integer))"</span>, returning = <span class="string">"result"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">logReturn</span><span class="params">(JoinPoint joinPoint, Object result)</span> </span>&#123;</span><br><span class="line">    System.out.println(joinPoint.getSignature() + <span class="string">"方法返回"</span> + <span class="string">" 参数列表："</span> + Arrays.toString(joinPoint.getArgs()));</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing</span>(value = <span class="string">"execution(public Integer net.mzgx.impl.MyCalculator.*(Integer, Integer))"</span>, throwing = <span class="string">"e"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">logException</span><span class="params">(JoinPoint joinPoint, Exception e)</span> </span>&#123;</span><br><span class="line">    System.out.println(joinPoint.getSignature() + <span class="string">"方法异常"</span> + <span class="string">" 参数列表："</span> + Arrays.toString(joinPoint.getArgs()));</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="抽取可重用的切入点表达式"><a href="#抽取可重用的切入点表达式" class="headerlink" title="抽取可重用的切入点表达式"></a>抽取可重用的切入点表达式</h4><ol>
<li>随便声明一个没有实现的返回void的空方法</li>
<li>给方法上标注一个<code>@Pointcut</code>注解</li>
<li>需要引用切入点的地方写上方法名</li>
</ol>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(public Integer net.mzgx.impl.MyCalculator.*(Integer, Integer))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">haha</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterReturning</span>(value = <span class="string">"haha()"</span>, returning = <span class="string">"result"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">logReturn</span><span class="params">(JoinPoint joinPoint, Object result)</span> </span>&#123;</span><br><span class="line">    System.out.println(joinPoint.getSignature() + <span class="string">"方法返回"</span> + <span class="string">" 参数列表："</span> + Arrays.toString(joinPoint.getArgs()));</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h4><p>环绕通知是以上通知的四合一</p>
<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around</span>(<span class="string">"haha()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">logAround</span><span class="params">(ProceedingJoinPoint pjs)</span> </span>&#123;</span><br><span class="line">    Object[] args = pjs.getArgs();</span><br><span class="line">    Object result = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 环绕前置通知</span></span><br><span class="line">        result = pjs.proceed(args);</span><br><span class="line">        <span class="comment">// 环绕返回通知</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">        <span class="comment">// 环绕异常通知</span></span><br><span class="line">        throwable.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 环绕后置通知</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol>
<li><p>环绕通知必须将方法的返回值返回出去</p>
</li>
<li><p>使用proceed()执行方法</p>
</li>
<li><p>环绕通知优于普通通知先执行</p>
</li>
</ol>
<p><code>环绕前置--普通前置--目标方法执行--环绕返回/出现异常--环绕后置--普通后置--普通返回或者异常</code></p>
<p>为了能让其他通知收到异常，环绕通知一定要把异常抛出去。</p>
<p>使用<code>@Order</code>注解可以更改切面顺序</p>
<h4 id="AOP使用场景"><a href="#AOP使用场景" class="headerlink" title="AOP使用场景"></a>AOP使用场景</h4><ol>
<li>日志保存</li>
<li>权限验证</li>
<li>安装检查</li>
<li>事务控制</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
        <tag>AOP</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis和spring整合</title>
    <url>/2020/01/20/mybatis%E5%92%8Cspring%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>spring</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇博客</title>
    <url>/2020/01/20/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
